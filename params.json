{"name":"Citymapper-api-java","tagline":"Citymapper Java API Wrapper","body":"# Citymapper Java API Wrapper\r\nThis Java module allows you to quickly connect the the [Citymapper API](http://www.citymapper.com/).\r\nCode is generated using [Swagger](http://swagger.io/) with [Retrofit](http://square.github.io/retrofit/)\r\nand [Gson](https://github.com/google/gson) as supporting libraries.\r\n\r\n# Citymapper API Description file\r\n\r\nThe Citymapper API description file is based on the [Open API Specification](https://openapis.org/).\r\nThis description file can be used to generate an API client in a variety of programming languages.\r\nPlease refer to [swagger-codegen](https://github.com/swagger-api/swagger-codegen) to generate client code in other languages.\r\n\r\n# Citymapper API key\r\n\r\nAn api key can be obtained by signing up [here](https://citymapper.3scale.net/signup)\r\n\r\n# Installation\r\n\r\nClone this repo to your local working directory.\r\n\r\n```\r\ngit clone  https://github.com/genericmethod/citymapper-api-java.git\r\n```\r\n\r\nInstall the dependency to your local repo. This will use the citymapper.yaml API definition file found\r\nin the resources folder to generate the API client.\r\n\r\n```\r\nmvn clean install\r\n````\r\nAdd the following maven dependency to your pom.xml\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.citymapper.api</groupId>\r\n    <artifactId>citymapper-api-java</artifactId>\r\n    <version>1.0</version>\r\n</dependency>\r\n```\r\n## Usage\r\n\r\nTo begin using this library, build a retrofit instance\r\n\r\n```java\r\nRetrofit retrofit = new ApiClient().getAdapterBuilder().build();\r\n```\r\n\r\nCreate an API instance\r\n\r\n```java\r\nTravelTimeApi travelTimeApi = retrofit.create(TravelTimeApi.class);\r\n```\r\n\r\nExecute an API call and get the body\r\n\r\n```java\r\n    Retrofit retrofit = new ApiClient(\"apikey\", API_KEY).getAdapterBuilder().build();\r\n    TravelTimeApi travelTimeApi = retrofit.create(TravelTimeApi.class);\r\n    final TravelTime time = travelTimeApi.traveltimeGet(\"51.5258156,-0.08833669999999999\",\r\n            \"51.5094,-0.002124\",\r\n            null,\r\n            null).execute().body();\r\n    assertNotNull(time);\r\n\r\n```\r\n\r\nTravel Time API call example:\r\n```java\r\n    Retrofit retrofit = new ApiClient(\"apikey\",API_KEY).getAdapterBuilder().build();\r\n    TravelTimeApi travelTimeApi = retrofit.create(TravelTimeApi.class);\r\n    final TravelTime time = travelTimeApi.traveltimeGet(\"51.5258156,-0.08833669999999999\",\r\n            \"51.5094,-0.002124\",\r\n            null,\r\n            null).execute().body();\r\n\r\n```\r\n\r\nSingle Point Coverage API call example:\r\n\r\n```java\r\n    Retrofit retrofit = new ApiClient(\"apikey\", API_KEY).getAdapterBuilder().build();\r\n    CoverageApi coverageApi = retrofit.create(CoverageApi.class);\r\n    final Coverage coverage = coverageApi.singlepointcoverageGet(\"51.5258156,-0.08833669999999999\").execute().body();\r\n```\r\n\r\nMultiple Point Coverage API call example:\r\n\r\n```java\r\n    Retrofit retrofit = new ApiClient(\"apikey\",API_KEY).getAdapterBuilder().build();\r\n    CoverageApi coverageApi = retrofit.create(CoverageApi.class);\r\n\r\n    Coverage coverage = new Coverage();\r\n    List<Point> points = new ArrayList<Point>();\r\n    Point londonPoint = new Point();\r\n    londonPoint.setCoord(Arrays.asList(51.5072,0.1275));\r\n    points.add(londonPoint);\r\n    Point pyongyangPoint = new Point();\r\n    pyongyangPoint.setCoord(Arrays.asList(39.0194, 125.7381));\r\n    pyongyangPoint.setId(\"Pyongyang\");\r\n    points.add(pyongyangPoint);\r\n\r\n    coverage.setPoints(points);\r\n\r\n    final Coverage coverageResult = coverageApi.coveragePost(coverage).execute().body();\r\n\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}